type dir =
  | Up
  | Down
  | Left
  | Right

let dir_of_char = function
  | 'U' -> Up
  | 'D' -> Down
  | 'L' -> Left
  | 'R' -> Right
  | _ -> failwith "Invalid direction"
;;

let parse input =
  Util.get_lines input
  |> List.map (fun s -> String.to_seq s |> Seq.map dir_of_char |> List.of_seq)
;;

let decode input =
  let dirs = parse input
  and point_to_digit (x, y) = (y * 3) + x + 1 |> string_of_int
  and move (x, y) = function
    | Up -> x, max 0 (y - 1)
    | Down -> x, min 2 (y + 1)
    | Left -> max 0 (x - 1), y
    | Right -> min 2 (x + 1), y
  in
  let rec aux (x, y) = function
    | [] -> point_to_digit (x, y), (x, y)
    | dir :: dirs -> aux (move (x, y) dir) dirs
  in
  let rec aux' acc (x, y) = function
    | [] -> acc
    | dirs :: dirss ->
      let digit, (x', y') = aux (x, y) dirs in
      aux' (acc ^ digit) (x', y') dirss
  in
  aux' "" (1, 1) dirs
;;

let decode2 input =
  let grid =
    [| [| ' '; ' '; '1'; ' '; ' ' |]
     ; [| ' '; '2'; '3'; '4'; ' ' |]
     ; [| '5'; '6'; '7'; '8'; '9' |]
     ; [| ' '; 'A'; 'B'; 'C'; ' ' |]
     ; [| ' '; ' '; 'D'; ' '; ' ' |]
    |]
  in
  let is_key (x, y) = grid.(x).(y) <> ' ' in
  let move (x, y) dir =
    let next =
      match dir with
      | Up -> max 0 (x - 1), y
      | Down -> min 4 (x + 1), y
      | Left -> x, max 0 (y - 1)
      | Right -> x, min 4 (y + 1)
    in
    if is_key next then next else x, y
  in
  let rec aux (x, y) = function
    | [] -> grid.(x).(y), (x, y)
    | dir :: dirs -> aux (move (x, y) dir) dirs
  in
  let rec aux' acc (x, y) = function
    | [] -> acc
    | dirs :: dirss ->
      let digit, (x', y') = aux (x, y) dirs in
      aux' (acc ^ Char.escaped digit) (x', y') dirss
  in
  aux' "" (2, 0) (parse input)
;;

let input =
  "RRLUDDLDUDUDUDRDDDRDDRLUUUDRUDURURURLRDDULLLDRRRRULDDRDDURDLURLURRUULRURDDDDLDDRRLDUDUUDURURDLDRRURDLLLDLLRUDRLDDRUULLLLLRRLDUDLUUDRUULLRLLLRLUURDLDLLDDRULDLUURRURLUUURLLDDULRDULULRULDDLRDDUUDLRRURLLURURLDDLURRLUURRRRLDRDLDUDRUDDRULLDUDDLRRLUUUUUDDLLDRLURDDRLLUDULDRDDLLUURUUUURDRLRLLULUULULLRRDLULRUDURDLRLRDDDRULLUULRURULLLUDUURUUUURUULDURDRRRULRLULDLRRULULUUDDDRDURLLURLLDUUUUDULRDLRDUUDDLDUDRLLRLRRRLULUDDDURLRRURUDDDRDRDRLLRDRDLDDRRDRDLLRLLLRRULRDDURRDUDRURDLDULLRRLURLRLLDURRRLLDRRURRRUULDRLDUULRDLDLURUDLLDLLUUDDDUUUDRL\n\
   DLRRDRRDDRRDURLUDDDDDULDDLLDRLURDDDDDDRDDDRDDDLLRRULLLRUDULLDURULRRDLURURUDRUURDRLUURRUDRUULUURULULDDLLDDRLDUDDRDRDDUULDULDDLUDUDDUDLULLUDLLLLLRRRUURLUUUULRURULUDDULLLRLRDRUUULULRUUUULRDLLDLDRDRDRDRRUUURULDUUDLDRDRURRUDDRLDULDDRULRRRLRDDUUDRUDLDULDURRDUDDLULULLDULLLRRRDULLLRRURDUURULDRDURRURRRRDLDRRUDDLLLDRDRDRURLUURURRUUURRUDLDDULDRDRRURDLUULDDUUUURLRUULRUURLUUUDLUDRLURUDLDLDLURUURLDURDDDDRURULLULLDRDLLRRLDLRRRDURDULLLDLRLDR\n\
   URURLLDRDLULULRDRRDDUUUDDRDUURULLULDRLUDLRUDDDLDRRLURLURUUDRLDUULDRDURRLLUDLDURRRRLURLDDRULRLDULDDRRLURDDRLUDDULUDULRLDULDLDUDRLLDDRRRDULLDLRRLDRLURLUULDDDDURULLDLLLDRRLRRLLRDDRDLDRURRUURLLDDDLRRRRRDLRRDRLDDDLULULRLUURULURUUDRULRLLRDLDULDRLLLDLRRRUDURLUURRUDURLDDDRDRURURRLRRLDDRURULDRUURRLULDLUDUULDLUULUDURRDDRLLLRLRRLUUURRDRUULLLRUUURLLDDRDRULDULURRDRURLRRLRDURRURRDLDUDRURUULULDDUDUULDRDURRRDLURRLRLDUDRDULLURLRRUDLUDRRRULRURDUDDDURLRULRRUDUUDDLLLURLLRLLDRDUURDDLUDLURDRRDLLRLURRUURRLDUUUUDUD\n\
   DRRDRRRLDDLDUDRDLRUUDRDUDRRDUDRDURRDDRLLURUUDRLRDDULLUULRUUDDRLDLRULDLRLDUDULUULLLRDLURDRDURURDUDUDDDRRLRRLLRULLLLRDRDLRRDDDLULDLLUUULRDURRULDDUDDDURRDRDRDRULRRRDRUDLLDDDRULRRLUDRDLDLDDDLRLRLRLDULRLLRLRDUUULLRRDLLRDULURRLDUDDULDDRLUDLULLRLDUDLULRDURLRULLRRDRDDLUULUUUULDRLLDRDLUDURRLLDURLLDDLLUULLDURULULDLUUDLRURRRULUDRLDRDURLDUDDULRDRRDDRLRRDDRUDRURULDRRLUURUDULDDDLRRRRDRRRLLURUURLRLULUULLRLRDLRRLLUULLDURDLULURDLRUUDUUURURUURDDRLULUUULRDRDRUUDDDRDRL\n\
   RLRUDDUUDDDDRRLRUUDLLDRUUUDRRDLDRLRLLDRLUDDURDLDUDRRUURULLRRLUULLUDRDRUDDULRLLUDLULRLRRUUDLDLRDDDRDDDUDLULDLRRLUDUDDRRRRDRDRUUDDURLRDLLDLDLRRDURULDRLRRURULRDDLLLRULLRUUUDLDUURDUUDDRRRDDRLDDRULRRRDRRLUDDDRUURRDRRDURDRUDRRDLUDDURRLUDUDLLRUURLRLLLDDURUDLDRLRLLDLLULLDRULUURLDDULDDRDDDURULLDRDDLURRDDRRRLDLRLRRLLDLLLRDUDDULRLUDDUULUDLDDDULULDLRDDLDLLLDUUDLRRLRDRRUUUURLDLRRLDULURLDRDURDDRURLDLDULURRRLRUDLDURDLLUDULDDU"
;;

let%test _ = decode "ULL\nRRDDD\nLURDL\nUUUUD" = "1985"

let run () =
  decode input |> print_endline;
  decode2 input |> print_endline
;;
